package com.bupt.user.dao;

import com.bupt.user.entity.User;
import com.bupt.user.entity.UserExample;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    long countByExample(UserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int deleteByExample(UserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int insertSelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    List<User> selectByExample(UserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    User selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int updateByExampleSelective(@Param("record") User record, @Param("example") UserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int updateByExample(@Param("record") User record, @Param("example") UserExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int updateByPrimaryKeySelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mmall_user
     *
     * @mbg.generated Thu Mar 05 08:24:22 CST 2020
     */
    int updateByPrimaryKey(User record);

    /**
     * 判断数据库中是否有此用户名
     * @param username
     * @return
     */
    int checkUser(@Param("username") String username);

    /**
     * 判断数据库中是否有此邮箱
     * @param email
     * @return
     */
    int checkEmail(String email);

    /**
     * 用户登录
     * @param userName
     * @param password
     * @return
     */
    User selectLogin(@Param("username") String userName, @Param("password") String password);

    String selectQuestionByUserName(String username);

    /**
     * 重置密码前验证问题是否正确
     * @param username
     * @param question
     * @param password
     * @return
     */
    int checkQuestionAndAnswerByUsername(@Param("username") String username, @Param("question") String question,
                                         @Param("password") String password);

    /**
     * 重置密码
     * @param username
     * @param password 修改之后的新的密码
     * @return
     */
    int updatePasswordByUsername(@Param("username") String username, @Param("password") String password);

    /**
     * 校验用户的密码是否正确
     * @param userId
     * @param password
     * @return
     */
    int checkPassword(@Param("userId") Integer userId, @Param("password") String password);

    /**
     * 判断此用户的邮箱是否已被其他用户使用
     * @param userId
     * @param email
     * @return
     */
    int checkEmailByUserId(@Param("userId") Integer userId, @Param("email") String email);

}
